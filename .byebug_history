q
url = MAIN_CENTR_URL + '/' + I_AM_FREE_URL
API::MainCenter.get_job!
q
API::MainCenter.get_job!
q
API::MainCenter.get_job!
API::MainCenter.get_gob!
API::MainCenter.get_gob
c
e=@driver.find_element(xpath: '/html/body/div[5]/div[2]/div/div/div/div/div/div/div[1]/div/div[3]/div/form/div/fieldset[25]/input')
e=@driver.find_element(xpath: '//fieldset[25]/button[2]')
e=@driver.find_element(xpath: '//fieldset[25]')
e=driver.find_element(xpath: '//fieldset[25]/button[2]')
element.tag_name
q
capcha.resolve
command_hash[:storage_name]
capcha = Capcha.new(@storage[command_hash[:storage_src]])
@storage[command_hash[:storage_src]]
command_hash[:storage_src]
command_hash
command_hash['src_path']
command_hash[:src_path]
@storage
@storage[command_hash[:src_path]]
q
storage
storage[command_hash[:storage_name]] = element.property(command_hash[:attribute_name])
 element.property(command_hash[:attribute_name])
q
command_hash[:do]
command_hash[:selector]
command_hash.keys
command_hash['attribute_name']
command_hash
command_hash[:attribute_name]
element.property(command_hash[:attribute_name])
element.property('src')
element.tag_name
element.xpath
element.name
 element.attribute(command_hash[:attribute_name])
q
capcha.call
capcha = Capcha.new('https://noqu.ru//bitrix/tools/captcha.php?captcha_code=0b4f65fcfa92bc43628a3d45b4445cf4')
q
capcha.call
capcha = Capcha.new('https://noqu.ru//bitrix/tools/captcha.php?captcha_code=0b4f65fcfa92bc43628a3d45b4445cf4')
q
capcha.call
capcha = Capcha.new('https://noqu.ru//bitrix/tools/captcha.php?captcha_code=0b4f65fcfa92bc43628a3d45b4445cf4')
q
capcha.call
capcha = Capcha.new('https://noqu.ru//bitrix/tools/captcha.php?captcha_code=0b4f65fcfa92bc43628a3d45b4445cf4')
q
capcha.call
capcha = Capcha.new('https://noqu.ru//bitrix/tools/captcha.php?captcha_code=0b4f65fcfa92bc43628a3d45b4445cf4')
q
capcha.call
capcha = Capcha.new('https://noqu.ru/bitrix/tools/captcha.php?captcha_code=01a6b0f629de0a619445ef8bca4ff61b')
q
capcha.call
capcha = Capcha.new('https://noqu.ru/bitrix/tools/captcha.php?captcha_code=01a6b0f629de0a619445ef8bca4ff61b')
q
capcha.call
capcha = Capcha.new('https://noqu.ru/bitrix/tools/captcha.php?captcha_code=04835a4f8ed8f6b0813e6ee5dc867d88')
q
response_kod, result_kod = capcha.get_result(result)
response_kod, result_kod = get_result(result)
result = capcha.send_request(image_base64)
image_base64 = capcha.download_capcha!
capcha = Capcha.new('https://noqu.ru/bitrix/tools/captcha.php?captcha_code=04835a4f8ed8f6b0813e6ee5dc867d88')
q
result = capcha.send_request(image_base64)
image_base64 = capcha.download_capcha!
capcha = Capcha.new('https://noqu.ru/bitrix/tools/captcha.php?captcha_code=04835a4f8ed8f6b0813e6ee5dc867d88')
q
result = capcha.send_request(image_base64)
image_base64 = capcha.download_capcha!
capcha = Capcha.new('https://noqu.ru/bitrix/tools/captcha.php?captcha_code=04835a4f8ed8f6b0813e6ee5dc867d88')
q
result = capcha.send_request(image_base64)
image_base64 = capcha.download_capcha!
capcha = Capcha.new('https://noqu.ru/bitrix/tools/captcha.php?captcha_code=04835a4f8ed8f6b0813e6ee5dc867d88')
q
result = capcha.call
capcha = Capcha.new('https://noqu.ru/bitrix/tools/captcha.php?captcha_code=04835a4f8ed8f6b0813e6ee5dc867d88')
q
puts('error') unless response.body =~ /(OK1|CAPCHA_NOT_READY)\|[\w\d]+$/
puts('error') unless response.body =~ /(OK|CAPCHA_NOT_READY)\|[\w\d]+$/
nil.present?
0.present?
response.body =~ /(OK|CAPCHA_NOT_READY)\|[\w\d]+$/
response.body
response.status
response = Faraday.get(Capcha::RU_CAPCHA_RESPONSE_URL, params, {'Accept' => 'application/json'})
params = { key: Capcha::API_KEY, action: :get, id: '50036577751' }
response = Faraday.get(Capcha::RU_CAPCHA_RESPONSE_URL, params_json, {'Accept' => 'application/json'})
params_json = { key: Capcha::API_KEY, action: :get, id: '50036577751' }.to_json
'OK|1ы2345' =~ /OK\|\d+$/
'OK|1ы2345' =~ /OK\|\d+/
'OK1|12345' =~ /OK\|\d+/
'OK|12345' =~ /OK\|\d+/
'OK|12345' ~ /OK\|\d+/
'OK|12345' ~= /OK\|\d+/
resp.body
resp.status
resp = Faraday.post(Capcha::RU_CAPCHA_SEND_URL, params_json, 'Content-Type' => 'application/json')
params_json = { key: Capcha::API_KEY, body: image_base64 }.to_json
resp.body
resp.status
resp.keys
resp[:body]
resp
resp = Faraday.post(Capcha::RU_CAPCHA_SEND_URL, params_json, 'Content-Type' => 'application/json')
params_json = { key: Capcha::API_KEY, method: :base64, body: image_base64 }.to_json
resp = Faraday.post(Capcha::RU_CAPCHA_SEND_URL, params_json, 'Content-Type' => 'application/json')
params_json = { key: Capcha::API_KEY, body: image_base64 }.to_json
params_json = { key: API_KEY, body: image_base64 }.to_json
resp = capcha.send_request(image_base64)
image_base64 = capcha.download_capcha!
capcha = Capcha.new('https://noqu.ru/bitrix/tools/captcha.php?captcha_code=04835a4f8ed8f6b0813e6ee5dc867d88')
q
resp = capcha.send_request(response)
resp = send_request(response)
response = capcha.download_capcha!
capcha = Capcha.new('https://noqu.ru/bitrix/tools/captcha.php?captcha_code=04835a4f8ed8f6b0813e6ee5dc867d88')
q
response = capcha.download_capcha!
response = Faraday.get(@image_url)
response = capcha.download_capcha!
response = capcha.download_capcha
capcha = Capcha.new('https://noqu.ru/bitrix/tools/captcha.php?captcha_code=04835a4f8ed8f6b0813e6ee5dc867d88')
q
Base64.strict_encode64(response.body)
response.body.size
response.headers
response.body
response.headers
response.header
response.status
response.class
response = capcha.download_capcha
capcha.download_capcha
capcha = Capcha.new('https://noqu.ru/bitrix/tools/captcha.php?captcha_code=04835a4f8ed8f6b0813e6ee5dc867d88')
q
@element = driver.find_element(**do_selector)
do_selector = command_hash.dig(:do, :selector)
command_hash.dig(:do, :selector)
n
command.to_s
q
@element.displayed?
command
q
@element.displayed?
@element = driver.find_element(xpath: '//fieldset[1]')
@element.displayed?
@element = driver.find_element(xpath: '//fieldset[3]')
@element.displayed?
@element.visible
validate_result
command_hash[:validate]
@element.present?
c
@element.send(command)
command = command_hash.dig(:next, :do)
@element.text
next_selector
q
@element.attribute(command_hash.dig(:validate, :attribute))
validate_result
@element.attribute(command_hash.dig(:validate, :attribute))
command_hash.dig(:validate, :attribute)
@element.attribute(:class)
command_hash[:validate]
q
@element.attribute(:class)
@element = driver.find_element('xpath' => '//fieldset[1]')
@element = driver.find_element('xpath' => '//fieldset[2]')
@element.text
@element.attribute(:class)
@element = driver.find_element('xpath' => '/html/body/div[5]/div[2]/div/div/div/div/div/div/div[1]/div/div[3]/div/form/div/fieldset[2]')
@element = driver.find_element('data-step' => '1')
@element.attribute(:text)
@element.attribute(:class)
@element.class
@element.text
@element = driver.find_element(tag_name: 'fieldset', 'data-step' => '1')
@element.text
@element = driver.find_element(tag_name: 'fieldset', 'data-step' => 'start')
@element.text
@lement.text
@element = driver.find_element(tag_name: 'fieldset')
@element.text
 @element = driver.find_element(**command_hash[:selector])
command_hash[:selector]
c
q
element.text
element = driver.find_element(class: 'question_title')
element = driver.find_element(name: 'vote_radio_1')
element
elements[1].ref
elements[1].location
elements[1].text
elements.second.text
elements.first.text
elements.first
element.first
elements = driver.find_elements(tag_name: 'label')
element = driver.find_element(tag_name: 'button', class: 'next')
element.childrens
element.context
element.text
element.name
element = driver.find_element(tag_name: 'button')
element.tag_name
element = driver.find_element(class: 'next')
element.click
element.http
element.to_json
element.text
element.tag_name
element.ref
element.hash
element.attribute(:value)
element.value
element.text
element = driver.find_element(name: 'vote_radio_1')
element.click
element.attribute(:type)
element.displayed?
element.hash
element.as_json
element = driver.find_element(class: 'next')
element = driver.find_elements(type: 'button')
element = driver.find_element(type: 'button')
element.name
element.atrributes
element = driver.find_element(name: 'q')
